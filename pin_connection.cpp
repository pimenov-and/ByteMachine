////////////////////////////////////////////////////////////////
// ByteMachine
// Подключение пина
////////////////////////////////////////////////////////////////
#include "pin_connection.h"
#include <QDebug>

////////////////////////////////////////////////////////////////
// Реализация класса PinConnection
////////////////////////////////////////////////////////////////

//==============================================================
// Конструктор с параметрами
//==============================================================
PinConnection::PinConnection(int nodeId, int index)
{
    init(nodeId, index);
}

//==============================================================
// Функция инициализации
//==============================================================
void PinConnection::init(int nodeId, int index)
{
    this->nodeId = nodeId;
    this->index = index;
}

//==============================================================
// Очистка (устанавливает поля в -1)
//==============================================================
void PinConnection::clear()
{
    nodeId = index = -1;
}

//==============================================================
// Получение признака подключения
//==============================================================
bool PinConnection::isConnect() const
{
    return nodeId != -1;
}

//==============================================================
// Получение представления в виде строки
//==============================================================
QString PinConnection::toStr() const
{
    return QString{"nodeId: %1, index: %2"}.arg(nodeId).arg(index);
}

////////////////////////////////////////////////////////////////
// Реализация функций
////////////////////////////////////////////////////////////////

//==============================================================
// Оператор == для типа PinConnection
//==============================================================
bool operator ==(const PinConnection &pc1, const PinConnection &pc2)
{
    return (pc1.nodeId == pc2.nodeId) && (pc1.index == pc2.index);
}

//==============================================================
// Оператор != для типа PinConnection
//==============================================================
bool operator !=(const PinConnection &pc1, const PinConnection &pc2)
{
    return !(pc1 == pc2);
}

//==============================================================
// Оператор << для вывода в поток QDebug типа PinConnection
//==============================================================
QDebug operator <<(QDebug debug, const PinConnection &pc)
{
    QDebugStateSaver saver{debug};
    debug.nospace() << pc.toStr();

    return debug;
}
